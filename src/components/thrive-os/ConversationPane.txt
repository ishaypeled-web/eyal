// THRIVE OS Conversation Panel
import React, { useState } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Search, User, Bot, Settings, Paperclip, Mic, Send } from 'lucide-react';
import { ScrollArea } from '@/components/ui/scroll-area';

interface Message {
  id: string;
  role: 'user' | 'thrive_os' | 'system';
  content: string;
  timestamp: string;
  coherence?: number;
}

export const ConversationPanel = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'system',
      content: 'THRIVE OS initialized. All systems operational. Coherence: 98.7%',
      timestamp: '10:30:45'
    },
    {
      id: '2',
      role: 'user',
      content: 'Show me the status of all active agents',
      timestamp: '10:31:12'
    },
    {
      id: '3',
      role: 'thrive_os',
      content: 'Analyzing agent orchestra... 2,439 agents currently active across 156 NUCLEUS units. Peak performance detected in Marketing and Development agents. Would you like detailed breakdown?',
      timestamp: '10:31:18',
      coherence: 97.2
    }
  ]);

  const [input, setInput] = useState('');

  const handleSend = () => {
    if (!input.trim()) return;

    const newMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date().toLocaleTimeString('en-US', { hour12: false })
    };

    setMessages(prev => [...prev, newMessage]);
    setInput('');

    // Simulate THRIVE OS response
    setTimeout(() => {
      const responseMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'thrive_os',
        content: 'Processing your request... Systems analyzing optimal response pattern.',
        timestamp: new Date().toLocaleTimeString('en-US', { hour12: false }),
        coherence: Math.floor(Math.random() * 5) + 95
      };
      setMessages(prev => [...prev, responseMessage]);
    }, 1500);
  };

  const formatTime = (time: string) => time;

  return (
    <div className="h-full flex flex-col">
      {/* Panel Header */}
      <div className="p-4 border-b border-os-bg-tertiary flex items-center gap-2">
        <Search className="w-5 h-5 text-os-primary" />
        <h2 className="text-lg font-semibold text-os-primary">Command Interface</h2>
      </div>

      {/* Messages Area */}
      <ScrollArea className="flex-1 p-4">
        <div className="space-y-4">
          {messages.map((message) => (
            <div key={message.id} className="space-y-2">
              <div className="flex items-center gap-2">
                {message.role === 'user' && <User className="w-4 h-4 text-blue-400" />}
                {message.role === 'thrive_os' && <Bot className="w-4 h-4 text-os-primary" />}
                {message.role === 'system' && <Settings className="w-4 h-4 text-os-secondary" />}
                <span className="text-sm font-medium text-foreground">
                  {message.role === 'user' ? 'You' : message.role === 'thrive_os' ? 'THRIVE OS' : 'SYSTEM'}
                </span>
                <span className="text-xs text-muted-foreground">{formatTime(message.timestamp)}</span>
                {message.coherence && (
                  <Badge variant="outline" className="text-xs text-os-secondary border-os-secondary">
                    {message.coherence}% coherent
                  </Badge>
                )}
              </div>
              <Card className="bg-os-bg-tertiary border-os-bg-tertiary">
                <CardContent className="p-3">
                  <p className="text-sm text-foreground">{message.content}</p>
                </CardContent>
              </Card>
            </div>
          ))}
        </div>
      </ScrollArea>

      {/* Input Area */}
      <div className="p-4 border-t border-os-bg-tertiary space-y-3">
        <Textarea
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Enter command or query..."
          className="min-h-[80px] bg-os-bg-tertiary border-os-bg-tertiary text-foreground placeholder:text-muted-foreground resize-none"
          onKeyDown={(e) => {
            if (e.key === 'Enter' && e.ctrlKey) {
              handleSend();
            }
          }}
        />
        
        <div className="flex items-center justify-between">
          <div className="flex gap-2">
            <Button variant="ghost" size="sm" className="text-os-primary hover:bg-os-bg-tertiary">
              <Paperclip className="w-4 h-4" />
            </Button>
            <Button variant="ghost" size="sm" className="text-os-primary hover:bg-os-bg-tertiary">
              <Mic className="w-4 h-4" />
            </Button>
          </div>
          
          <div className="flex items-center gap-2">
            <span className="text-xs text-muted-foreground">Ctrl+Enter</span>
            <Button 
              onClick={handleSend}
              disabled={!input.trim()}
              className="bg-os-primary hover:bg-os-primary/90 text-os-bg-primary"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};