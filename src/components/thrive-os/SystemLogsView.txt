// THRIVE OS System Logs Viewer
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Terminal, Info, AlertTriangle, XCircle, CheckCircle, Filter, Download, RefreshCw } from 'lucide-react';

interface LogEntry {
  id: string;
  timestamp: string;
  level: 'info' | 'warning' | 'error' | 'success' | 'debug';
  source: string;
  message: string;
  details?: string;
}

export const SystemLogsViewer = () => {
  const [logLevel, setLogLevel] = useState<string>('all');
  const [autoRefresh, setAutoRefresh] = useState(false);

  const logs: LogEntry[] = [
    { id: 'L001', timestamp: '2024-01-15 10:35:42', level: 'info', source: 'Agent.M.2.047', message: 'Marketing campaign analysis initiated', details: 'Processing 1,247 data points for Q1 campaign optimization' },
    { id: 'L002', timestamp: '2024-01-15 10:35:38', level: 'success', source: 'System.Core', message: 'NUCLEUS unit N-Corp.15 successfully spawned', details: 'Corporate edition NUCLEUS initialized with 85% autonomy level' },
    { id: 'L003', timestamp: '2024-01-15 10:35:31', level: 'warning', source: 'Coherence.Monitor', message: 'Agent coherence fluctuation detected', details: 'Agent A-C.2.156 coherence dropped from 94% to 89% - investigating cause' },
    { id: 'L004', timestamp: '2024-01-15 10:35:28', level: 'error', source: 'Cassette.Library', message: 'Failed to load cassette K.3.045', details: 'Dependency cassette K.2.012 not found - circular dependency detected' },
    { id: 'L005', timestamp: '2024-01-15 10:35:15', level: 'info', source: 'API.Gateway', message: 'External API connection established', details: 'Connected to HubSpot API - rate limit: 100/min, current usage: 23/min' },
    { id: 'L006', timestamp: '2024-01-15 10:35:12', level: 'debug', source: 'System.Monitor', message: 'Memory usage optimization completed', details: 'Freed 234MB of unused memory - system performance improved by 12%' },
    { id: 'L007', timestamp: '2024-01-15 10:35:08', level: 'warning', source: 'Rate.Limiter', message: 'API rate limit approaching threshold', details: 'OpenAI API usage at 87% of daily limit - recommend optimization' },
    { id: 'L008', timestamp: '2024-01-15 10:35:03', level: 'success', source: 'DNA.Workshop', message: 'DNA component successfully updated', details: 'Interest strength for "Growth Hacking" updated from 0.89 to 0.92' }
  ];

  const getLogIcon = (level: string) => {
    switch (level) {
      case 'info': return Info;
      case 'warning': return AlertTriangle;
      case 'error': return XCircle;
      case 'success': return CheckCircle;
      case 'debug': return Terminal;
      default: return Info;
    }
  };

  const getLogColor = (level: string) => {
    switch (level) {
      case 'info': return 'text-os-primary border-l-os-primary';
      case 'warning': return 'text-os-warning border-l-os-warning';
      case 'error': return 'text-os-accent border-l-os-accent';
      case 'success': return 'text-os-secondary border-l-os-secondary';
      case 'debug': return 'text-muted-foreground border-l-muted';
      default: return 'text-muted-foreground border-l-muted';
    }
  };

  const getLevelBadgeColor = (level: string) => {
    switch (level) {
      case 'info': return 'bg-os-primary text-os-bg-primary';
      case 'warning': return 'bg-os-warning text-os-bg-primary';
      case 'error': return 'bg-os-accent text-white';
      case 'success': return 'bg-os-secondary text-os-bg-primary';
      case 'debug': return 'bg-os-bg-tertiary text-foreground';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const filteredLogs = logLevel === 'all' ? logs : logs.filter(log => log.level === logLevel);

  return (
    <div className="p-4 h-full">
      <div className="mb-4 space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-os-primary">System Logs</h3>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={() => setAutoRefresh(!autoRefresh)} className={`border-os-primary text-os-primary ${autoRefresh ? 'bg-os-primary/10' : ''}`}>
              <RefreshCw className={`w-3 h-3 mr-1 ${autoRefresh ? 'animate-spin' : ''}`} />Auto Refresh
            </Button>
            <Button variant="outline" size="sm" className="border-os-secondary text-os-secondary">
              <Download className="w-3 h-3 mr-1" />Export
            </Button>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Filter className="w-4 h-4 text-muted-foreground" />
          <Select value={logLevel} onValueChange={setLogLevel}>
            <SelectTrigger className="w-40 bg-os-bg-tertiary border-os-bg-tertiary">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Levels</SelectItem>
              <SelectItem value="error">Errors</SelectItem>
              <SelectItem value="warning">Warnings</SelectItem>
              <SelectItem value="info">Info</SelectItem>
              <SelectItem value="success">Success</SelectItem>
              <SelectItem value="debug">Debug</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
      <ScrollArea className="h-[calc(100%-8rem)]">
        <div className="space-y-2">
          {filteredLogs.map((log) => {
            const Icon = getLogIcon(log.level);
            return (
              <Card key={log.id} className={`bg-os-bg-secondary border-l-4 border-y-0 border-r-0 ${getLogColor(log.level)}`}>
                <CardContent className="p-3">
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <Icon className={`w-4 h-4 ${getLogColor(log.level).split(' ')[0]}`} />
                      <Badge className={getLevelBadgeColor(log.level)}>{log.level.toUpperCase()}</Badge>
                      <span className="text-xs text-muted-foreground">{log.source}</span>
                    </div>
                    <span className="text-xs text-muted-foreground font-mono">{log.timestamp}</span>
                  </div>
                  <div className="space-y-1">
                    <div className="text-sm font-medium text-foreground">{log.message}</div>
                    {log.details && <div className="text-xs text-muted-foreground">{log.details}</div>}
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      </ScrollArea>
    </div>
  );
};