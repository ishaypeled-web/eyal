// THRIVE OS Active Tasks Monitor
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Play, Pause, X, Clock, User } from 'lucide-react';

interface Task {
  id: string;
  title: string;
  status: 'running' | 'paused' | 'pending' | 'completed';
  progress: number;
  assignedTo: string;
  eta: string;
  category: string;
}

export const ActiveTasksMonitor = () => {
  const tasks: Task[] = [
    {
      id: 'T001',
      title: 'Marketing Campaign Analysis',
      status: 'running',
      progress: 67,
      assignedTo: 'Agent-M.2.047',
      eta: '14 minutes',
      category: 'Analysis'
    },
    {
      id: 'T002',
      title: 'DNA Pattern Recognition',
      status: 'running',
      progress: 89,
      assignedTo: 'Agent-AI.1.023',
      eta: '3 minutes',
      category: 'Processing'
    },
    {
      id: 'T003',
      title: 'Cassette Optimization',
      status: 'paused',
      progress: 34,
      assignedTo: 'Agent-S.3.109',
      eta: '22 minutes',
      category: 'Optimization'
    },
    {
      id: 'T004',
      title: 'System Health Check',
      status: 'pending',
      progress: 0,
      assignedTo: 'Agent-SYS.1.001',
      eta: '5 minutes',
      category: 'Maintenance'
    }
  ];

  const runningTasks = tasks.filter(task => task.status === 'running').length;

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'running': return 'bg-os-secondary text-os-bg-primary';
      case 'paused': return 'bg-os-warning text-os-bg-primary';
      case 'pending': return 'bg-os-bg-tertiary text-foreground';
      case 'completed': return 'bg-os-primary text-os-bg-primary';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'Analysis': return 'border-os-primary text-os-primary';
      case 'Processing': return 'border-os-secondary text-os-secondary';
      case 'Optimization': return 'border-os-warning text-os-warning';
      case 'Maintenance': return 'border-os-accent text-os-accent';
      default: return 'border-muted text-muted-foreground';
    }
  };

  return (
    <div className="p-4 h-full">
      <div className="mb-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-os-primary">Active Tasks</h3>
          <Badge className="bg-os-secondary text-os-bg-primary">
            {runningTasks} Running
          </Badge>
        </div>
      </div>

      <div className="space-y-4 h-[calc(100%-4rem)] overflow-auto">
        {tasks.length === 0 ? (
          <Card className="bg-os-bg-secondary border-os-bg-tertiary">
            <CardContent className="p-6 text-center">
              <div className="text-muted-foreground">No active tasks</div>
            </CardContent>
          </Card>
        ) : (
          tasks.map((task) => (
            <Card key={task.id} className="bg-os-bg-secondary border-os-bg-tertiary">
              <CardHeader className="pb-3">
                <div className="flex items-start justify-between">
                  <div className="space-y-1">
                    <CardTitle className="text-base text-foreground">{task.title}</CardTitle>
                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
                      <span>#{task.id}</span>
                      <Badge variant="outline" className={getCategoryColor(task.category)}>
                        {task.category}
                      </Badge>
                    </div>
                  </div>
                  <Badge className={getStatusColor(task.status)}>
                    {task.status.toUpperCase()}
                  </Badge>
                </div>
              </CardHeader>
              
              <CardContent className="space-y-4">
                <div>
                  <div className="flex justify-between text-sm mb-2">
                    <span>Progress</span>
                    <span>{task.progress}%</span>
                  </div>
                  <Progress value={task.progress} className="h-2" />
                </div>

                <div className="flex items-center justify-between text-sm">
                  <div className="flex items-center gap-2 text-muted-foreground">
                    <User className="w-4 h-4" />
                    <span>{task.assignedTo}</span>
                  </div>
                  <div className="flex items-center gap-2 text-muted-foreground">
                    <Clock className="w-4 h-4" />
                    <span>ETA: {task.eta}</span>
                  </div>
                </div>

                <div className="flex gap-2">
                  {task.status === 'running' ? (
                    <Button variant="outline" size="sm" className="border-os-warning text-os-warning hover:bg-os-warning/10">
                      <Pause className="w-3 h-3 mr-1" />
                      Pause
                    </Button>
                  ) : task.status === 'paused' ? (
                    <Button variant="outline" size="sm" className="border-os-secondary text-os-secondary hover:bg-os-secondary/10">
                      <Play className="w-3 h-3 mr-1" />
                      Resume
                    </Button>
                  ) : task.status === 'pending' ? (
                    <Button variant="outline" size="sm" className="border-os-primary text-os-primary hover:bg-os-primary/10">
                      <Play className="w-3 h-3 mr-1" />
                      Start
                    </Button>
                  ) : null}
                  
                  <Button variant="outline" size="sm" className="border-os-accent text-os-accent hover:bg-os-accent/10">
                    <X className="w-3 h-3 mr-1" />
                    Cancel
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </div>
    </div>
  );
};