// THRIVE OS Knowledge Base Viewer
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Search, Book, FileText, Code, Database, Eye, Download, Star } from 'lucide-react';

interface KnowledgeItem {
  id: string;
  title: string;
  type: 'cassette' | 'documentation' | 'code' | 'data';
  category: string;
  description: string;
  tags: string[];
  usage: number;
  rating: number;
  lastUpdated: string;
}

export const KnowledgeBaseViewer = () => {
  const [searchQuery, setSearchQuery] = useState('');

  const knowledgeItems: KnowledgeItem[] = [
    { id: 'K.2.004', title: 'Marketing Fundamentals', type: 'cassette', category: 'Knowledge', description: 'Core marketing principles and strategies for effective campaign development.', tags: ['marketing', 'strategy', 'fundamentals'], usage: 234, rating: 4.8, lastUpdated: '2024-01-15' },
    { id: 'S.1.002', title: 'Growth Hacking Strategy', type: 'cassette', category: 'Strategy', description: 'Advanced growth hacking methodologies and implementation frameworks.', tags: ['growth', 'hacking', 'strategy', 'scaling'], usage: 189, rating: 4.9, lastUpdated: '2024-01-12' },
    { id: 'DOC.001', title: 'API Integration Guide', type: 'documentation', category: 'Technical', description: 'Comprehensive guide for integrating external APIs with THRIVE System.', tags: ['api', 'integration', 'technical', 'guide'], usage: 156, rating: 4.7, lastUpdated: '2024-01-10' },
    { id: 'CODE.033', title: 'Data Processing Scripts', type: 'code', category: 'Automation', description: 'Collection of scripts for automated data processing and validation.', tags: ['data', 'automation', 'scripts', 'processing'], usage: 89, rating: 4.5, lastUpdated: '2024-01-08' },
    { id: 'DATA.078', title: 'Market Analysis Dataset', type: 'data', category: 'Research', description: 'Comprehensive market analysis data for Q4 2023 performance metrics.', tags: ['market', 'analysis', 'dataset', 'metrics'], usage: 67, rating: 4.6, lastUpdated: '2024-01-05' }
  ];

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'cassette': return Book;
      case 'documentation': return FileText;
      case 'code': return Code;
      case 'data': return Database;
      default: return FileText;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'cassette': return 'bg-os-primary text-os-bg-primary';
      case 'documentation': return 'bg-os-secondary text-os-bg-primary';
      case 'code': return 'bg-os-warning text-os-bg-primary';
      case 'data': return 'bg-os-accent text-white';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const filteredItems = knowledgeItems.filter(item =>
    item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    item.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
    item.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  return (
    <div className="p-4 h-full">
      <div className="mb-4 space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-os-primary">Knowledge Base</h3>
          <Badge className="bg-os-secondary text-os-bg-primary">{knowledgeItems.length} Items</Badge>
        </div>
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
          <Input placeholder="Search knowledge base..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="pl-9 bg-os-bg-tertiary border-os-bg-tertiary" />
        </div>
      </div>
      <ScrollArea className="h-[calc(100%-8rem)]">
        <div className="space-y-3">
          {filteredItems.map((item) => {
            const Icon = getTypeIcon(item.type);
            return (
              <Card key={item.id} className="bg-os-bg-secondary border-os-bg-tertiary">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <Icon className="w-5 h-5 text-os-primary" />
                      <div>
                        <CardTitle className="text-base text-foreground">{item.title}</CardTitle>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge className={getTypeColor(item.type)}>{item.type.toUpperCase()}</Badge>
                          <span className="text-xs text-muted-foreground">#{item.id}</span>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-1 text-xs text-muted-foreground">
                      <Star className="w-3 h-3 fill-current text-os-warning" />
                      <span>{item.rating}</span>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-3">
                  <p className="text-sm text-muted-foreground">{item.description}</p>
                  <div className="flex flex-wrap gap-1">
                    {item.tags.map((tag) => (
                      <Badge key={tag} variant="outline" className="text-xs border-os-primary/30 text-os-primary">{tag}</Badge>
                    ))}
                  </div>
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <div className="flex items-center gap-4">
                      <span>Usage: {item.usage}</span>
                      <span>Updated: {item.lastUpdated}</span>
                    </div>
                    <div className="flex gap-2">
                      <Button variant="ghost" size="sm" className="h-7 px-2 text-os-primary">
                        <Eye className="w-3 h-3 mr-1" />View
                      </Button>
                      <Button variant="ghost" size="sm" className="h-7 px-2 text-os-secondary">
                        <Download className="w-3 h-3 mr-1" />Load
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      </ScrollArea>
    </div>
  );
};