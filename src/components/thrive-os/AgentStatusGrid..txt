// THRIVE OS Agent Status Grid
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Bot, Settings, Clock } from 'lucide-react';

interface Agent {
  id: string;
  name: string;
  type: string;
  status: 'active' | 'idle' | 'processing' | 'error';
  lastAction: string;
  uptime: string;
}

export const AgentStatusGrid = () => {
  const agents: Agent[] = [
    { id: 'A-M.2.047', name: 'Marketing Analyst', type: 'Analysis', status: 'active', lastAction: 'Campaign optimization', uptime: '2h 34m' },
    { id: 'A-AI.1.023', name: 'Pattern Recognizer', type: 'AI Core', status: 'processing', lastAction: 'DNA analysis', uptime: '5h 12m' },
    { id: 'A-S.3.109', name: 'Strategy Former', type: 'Strategy', status: 'idle', lastAction: 'Strategic planning', uptime: '1h 45m' },
    { id: 'A-SYS.1.001', name: 'System Monitor', type: 'System', status: 'active', lastAction: 'Health check', uptime: '12h 20m' },
    { id: 'A-D.4.078', name: 'Data Processor', type: 'Data', status: 'processing', lastAction: 'Data validation', uptime: '3h 56m' },
    { id: 'A-C.2.156', name: 'Content Creator', type: 'Creative', status: 'error', lastAction: 'Content generation', uptime: '45m' }
  ];

  const activeAgents = agents.filter(agent => agent.status === 'active').length;

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-os-secondary text-os-bg-primary';
      case 'processing': return 'bg-os-primary text-os-bg-primary';
      case 'idle': return 'bg-os-warning text-os-bg-primary';
      case 'error': return 'bg-os-accent text-white';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'Analysis': return 'border-os-primary text-os-primary';
      case 'AI Core': return 'border-os-secondary text-os-secondary';
      case 'Strategy': return 'border-os-warning text-os-warning';
      case 'System': return 'border-os-accent text-os-accent';
      case 'Data': return 'border-blue-400 text-blue-400';
      case 'Creative': return 'border-purple-400 text-purple-400';
      default: return 'border-muted text-muted-foreground';
    }
  };

  return (
    <Card className="bg-os-bg-secondary border-os-bg-tertiary">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-os-primary">Agent Orchestra</CardTitle>
          <Badge className="bg-os-secondary text-os-bg-primary">{activeAgents} Active</Badge>
        </div>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[300px]">
          <div className="space-y-3">
            {agents.map((agent) => (
              <div key={agent.id} className="p-3 rounded-lg bg-os-bg-tertiary border border-os-bg-tertiary hover:border-os-primary/30 transition-colors">
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <Bot className="w-4 h-4 text-os-primary" />
                    <div>
                      <div className="font-medium text-sm text-foreground">{agent.name}</div>
                      <div className="text-xs text-muted-foreground">#{agent.id}</div>
                    </div>
                  </div>
                  <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                    <Settings className="w-3 h-3" />
                  </Button>
                </div>
                <div className="flex items-center justify-between mb-2">
                  <Badge className={getStatusColor(agent.status)}>{agent.status.toUpperCase()}</Badge>
                  <Badge variant="outline" className={getTypeColor(agent.type)}>{agent.type}</Badge>
                </div>
                <div className="space-y-1 text-xs text-muted-foreground">
                  <div>Last: {agent.lastAction}</div>
                  <div className="flex items-center gap-1">
                    <Clock className="w-3 h-3" />
                    <span>Uptime: {agent.uptime}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
};