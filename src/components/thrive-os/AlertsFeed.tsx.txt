// THRIVE OS Alerts Feed
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { AlertTriangle, Info, CheckCircle, XCircle, Clock, X } from 'lucide-react';

interface Alert {
  id: string;
  type: 'info' | 'warning' | 'error' | 'success';
  title: string;
  message: string;
  timestamp: string;
  source: string;
}

export const AlertsFeed = () => {
  const alerts: Alert[] = [
    { id: 'A001', type: 'warning', title: 'Coherence Fluctuation', message: 'Agent A-C.2.156 coherence dropped to 89%', timestamp: '2 min ago', source: 'Coherence Monitor' },
    { id: 'A002', type: 'info', title: 'New Agent Spawned', message: 'Agent A-D.4.079 successfully spawned', timestamp: '5 min ago', source: 'Agent Orchestra' },
    { id: 'A003', type: 'success', title: 'Task Completed', message: 'Marketing Campaign Analysis finished', timestamp: '8 min ago', source: 'Task Manager' },
    { id: 'A004', type: 'error', title: 'Cassette Load Failed', message: 'K.3.045 failed to load - dependency missing', timestamp: '12 min ago', source: 'Cassette Library' },
    { id: 'A005', type: 'info', title: 'System Update', message: 'NUCLEUS unit N-Corp.15 updated successfully', timestamp: '15 min ago', source: 'System Core' }
  ];

  const getAlertIcon = (type: string) => {
    switch (type) {
      case 'warning': return AlertTriangle;
      case 'error': return XCircle;
      case 'success': return CheckCircle;
      case 'info': return Info;
      default: return Info;
    }
  };

  const getAlertColor = (type: string) => {
    switch (type) {
      case 'warning': return 'text-os-warning border-os-warning bg-os-warning/10';
      case 'error': return 'text-os-accent border-os-accent bg-os-accent/10';
      case 'success': return 'text-os-secondary border-os-secondary bg-os-secondary/10';
      case 'info': return 'text-os-primary border-os-primary bg-os-primary/10';
      default: return 'text-muted-foreground border-muted bg-muted/10';
    }
  };

  return (
    <Card className="bg-os-bg-secondary border-os-bg-tertiary">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-os-primary">System Alerts</CardTitle>
          <Badge variant="outline" className="text-os-warning border-os-warning">
            {alerts.filter(a => a.type === 'warning' || a.type === 'error').length} Active
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[300px]">
          <div className="space-y-3">
            {alerts.map((alert) => {
              const Icon = getAlertIcon(alert.type);
              return (
                <div key={alert.id} className={`p-3 rounded-lg border ${getAlertColor(alert.type)}`}>
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <Icon className="w-4 h-4 flex-shrink-0" />
                      <div>
                        <div className="font-medium text-sm">{alert.title}</div>
                        <div className="text-xs opacity-80">{alert.source}</div>
                      </div>
                    </div>
                    <Button variant="ghost" size="sm" className="h-6 w-6 p-0 opacity-60 hover:opacity-100">
                      <X className="w-3 h-3" />
                    </Button>
                  </div>
                  <div className="text-sm mb-2 opacity-90">{alert.message}</div>
                  <div className="flex items-center gap-1 text-xs opacity-60">
                    <Clock className="w-3 h-3" />
                    <span>{alert.timestamp}</span>
                  </div>
                </div>
              );
            })}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
};