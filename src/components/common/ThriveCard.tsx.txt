import React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';
import { BaseComponentProps } from '@/types';

const cardVariants = cva(
  'rounded-lg transition-all duration-200 border',
  {
    variants: {
      variant: {
        default: 'bg-card/50 backdrop-blur-sm border-border/50',
        ghost: 'bg-transparent border-transparent',
        solid: 'bg-card border-border',
        gradient: 'bg-gradient-dna border-primary/20',
        glassmorphism: 'bg-background/40 backdrop-blur-xl border-border/30'
      },
      size: {
        sm: 'p-3',
        md: 'p-4', 
        lg: 'p-6',
        xl: 'p-8'
      },
      interactive: {
        true: 'hover:shadow-lg hover:shadow-primary/20 cursor-pointer transform hover:scale-[1.02] transition-transform',
        false: ''
      },
      glow: {
        true: 'glow-primary',
        false: ''
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'lg',
      interactive: false,
      glow: false
    }
  }
);

interface ThriveCardProps extends BaseComponentProps, VariantProps<typeof cardVariants> {
  onClick?: () => void;
  disabled?: boolean;
}

export const ThriveCard: React.FC<ThriveCardProps> = ({
  children,
  variant,
  size,
  interactive,
  glow,
  className,
  onClick,
  disabled = false
}) => {
  return (
    <div 
      className={cn(
        cardVariants({ variant, size, interactive, glow }),
        disabled && 'opacity-50 cursor-not-allowed',
        className
      )}
      onClick={disabled ? undefined : onClick}
    >
      {children}
    </div>
  );
};

export default ThriveCard;