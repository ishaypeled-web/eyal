import { useState } from 'react';
import { Package, Eye, Edit, Trash2, Clock, Target, AlertTriangle, CheckCircle, MoreHorizontal } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';

interface Cassette {
  id: string;
  name: string;
  category: string;
  status: 'existing' | 'missing' | 'draft' | 'deprecated';
  coherence: number;
  usageCount: number;
  quickScan: string;
  tags: string[];
  priority: number;
  lastUsed?: Date;
  blockedBy?: string[];
  requestedBy?: string;
  approvalScore?: number;
}

interface CassetteGridProps {
  cassettes: Cassette[];
  viewMode: 'grid' | 'list' | 'compact';
  loading: boolean;
  onCassetteSelect: (cassette: Cassette) => void;
  onCreateFromGap: (gapId: string) => void;
}

const CassetteGrid = ({ cassettes, viewMode, loading, onCassetteSelect, onCreateFromGap }: CassetteGridProps) => {
  const [selectedCassettes, setSelectedCassettes] = useState<string[]>([]);

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'existing': return <CheckCircle className="h-4 w-4 text-coherence-high" />;
      case 'missing': return <AlertTriangle className="h-4 w-4 text-coherence-low" />;
      case 'draft': return <Clock className="h-4 w-4 text-coherence-mid" />;
      case 'deprecated': return <Target className="h-4 w-4 text-muted-foreground" />;
      default: return <Package className="h-4 w-4 text-muted-foreground" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'existing': return 'border-coherence-high/30 bg-coherence-high/5';
      case 'missing': return 'border-coherence-low/30 bg-coherence-low/5 border-dashed';
      case 'draft': return 'border-coherence-mid/30 bg-coherence-mid/5';
      case 'deprecated': return 'border-muted opacity-50';
      default: return 'border-border';
    }
  };

  const getCategoryColor = (category: string) => {
    const colors: Record<string, string> = {
      'META': 'bg-blue-500',
      'M': 'bg-green-500',
      'S': 'bg-yellow-500',
      'P': 'bg-purple-500',
      'V': 'bg-pink-500',
      'I': 'bg-indigo-500',
      'K': 'bg-cyan-500',
      'L': 'bg-orange-500',
      'E': 'bg-red-500',
      'INT': 'bg-gray-500',
      'REG': 'bg-stone-500'
    };
    return colors[category] || 'bg-muted';
  };

  const formatLastUsed = (date?: Date) => {
    if (!date) return 'Never';
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    
    if (days === 0) return 'Today';
    if (days === 1) return 'Yesterday';
    if (days < 7) return `${days} days ago`;
    if (days < 30) return `${Math.floor(days / 7)} weeks ago`;
    return `${Math.floor(days / 30)} months ago`;
  };

  const handleCassetteClick = (cassette: Cassette) => {
    if (cassette.status === 'missing') {
      onCreateFromGap(cassette.id);
    } else {
      onCassetteSelect(cassette);
    }
  };

  const CassetteCard = ({ cassette }: { cassette: Cassette }) => (
    <Card 
      className={`cursor-pointer transition-all duration-200 hover:scale-105 hover:shadow-lg ${getStatusColor(cassette.status)}`}
      onClick={() => handleCassetteClick(cassette)}
    >
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="space-y-1 flex-1">
            <div className="flex items-center gap-2">
              <span className="text-xs font-mono text-muted-foreground">{cassette.id}</span>
              {getStatusIcon(cassette.status)}
            </div>
            <CardTitle className="text-sm leading-tight line-clamp-2">
              {cassette.name}
            </CardTitle>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>
              <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem>
                <Eye className="mr-2 h-4 w-4" />
                View Details
              </DropdownMenuItem>
              {cassette.status === 'existing' && (
                <DropdownMenuItem>
                  <Edit className="mr-2 h-4 w-4" />
                  Edit Content
                </DropdownMenuItem>
              )}
              <DropdownMenuItem className="text-destructive">
                <Trash2 className="mr-2 h-4 w-4" />
                {cassette.status === 'missing' ? 'Remove Gap' : 'Delete'}
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
        
        <div className="flex items-center gap-2">
          <Badge variant="outline" className="text-xs">
            <div className={`w-2 h-2 rounded-full ${getCategoryColor(cassette.category)} mr-1`} />
            {cassette.category}
          </Badge>
          <Badge variant="secondary" className="text-xs">
            P{cassette.priority}
          </Badge>
        </div>
      </CardHeader>

      <CardContent className="pt-0">
        {cassette.status === 'existing' ? (
          <>
            <p className="text-xs text-muted-foreground mb-3 line-clamp-2">
              {cassette.quickScan}
            </p>
            
            <div className="space-y-2">
              <div className="flex justify-between text-xs">
                <span>Coherence</span>
                <span className="font-mono text-primary">{cassette.coherence.toFixed(1)}%</span>
              </div>
              <Progress value={cassette.coherence} className="h-1" />
              
              <div className="flex justify-between text-xs text-muted-foreground">
                <span>Usage: {cassette.usageCount}</span>
                <span>Last: {formatLastUsed(cassette.lastUsed)}</span>
              </div>
            </div>

            {cassette.tags.length > 0 && (
              <div className="mt-3 flex flex-wrap gap-1">
                {cassette.tags.slice(0, 3).map(tag => (
                  <Badge key={tag} variant="outline" className="text-xs">
                    #{tag}
                  </Badge>
                ))}
                {cassette.tags.length > 3 && (
                  <Badge variant="outline" className="text-xs">
                    +{cassette.tags.length - 3}
                  </Badge>
                )}
              </div>
            )}
          </>
        ) : cassette.status === 'missing' ? (
          <div className="text-center py-4">
            <Package className="h-8 w-8 mx-auto mb-2 text-muted-foreground opacity-50" />
            <p className="text-xs text-muted-foreground mb-2">Missing Cassette</p>
            {cassette.blockedBy && (
              <p className="text-xs text-destructive mb-2">
                Blocks: {cassette.blockedBy.join(', ')}
              </p>
            )}
            {cassette.approvalScore && (
              <div className="flex items-center justify-center gap-1 text-xs">
                <span>Approval:</span>
                <span className={`font-mono ${cassette.approvalScore >= 70 ? 'text-coherence-high' : 'text-coherence-low'}`}>
                  {cassette.approvalScore}/100
                </span>
              </div>
            )}
            <Button size="sm" variant="outline" className="mt-2" onClick={(e) => {
              e.stopPropagation();
              onCreateFromGap(cassette.id);
            }}>
              Create Now
            </Button>
          </div>
        ) : (
          <div className="text-center py-4">
            <Clock className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
            <p className="text-xs text-muted-foreground">Draft Cassette</p>
            <Button size="sm" variant="outline" className="mt-2">
              Complete
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );

  const CassetteListItem = ({ cassette }: { cassette: Cassette }) => (
    <Card 
      className={`cursor-pointer transition-all duration-200 hover:bg-muted/50 ${getStatusColor(cassette.status)}`}
      onClick={() => handleCassetteClick(cassette)}
    >
      <CardContent className="p-4">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2 min-w-0 flex-1">
            <div className={`w-3 h-3 rounded-full ${getCategoryColor(cassette.category)}`} />
            <span className="text-xs font-mono text-muted-foreground min-w-fit">
              {cassette.id}
            </span>
            <div className="min-w-0 flex-1">
              <div className="font-medium text-sm truncate">{cassette.name}</div>
              <div className="text-xs text-muted-foreground truncate">
                {cassette.status === 'existing' ? cassette.quickScan : `${cassette.status.toUpperCase()}`}
              </div>
            </div>
          </div>
          
          <div className="flex items-center gap-4 text-xs">
            {cassette.status === 'existing' && (
              <>
                <div className="text-center">
                  <div className="font-mono text-primary">{cassette.coherence.toFixed(1)}%</div>
                  <div className="text-muted-foreground">Coherence</div>
                </div>
                <div className="text-center">
                  <div className="font-mono">{cassette.usageCount}</div>
                  <div className="text-muted-foreground">Usage</div>
                </div>
              </>
            )}
            {cassette.status === 'missing' && cassette.approvalScore && (
              <div className="text-center">
                <div className={`font-mono ${cassette.approvalScore >= 70 ? 'text-coherence-high' : 'text-coherence-low'}`}>
                  {cassette.approvalScore}/100
                </div>
                <div className="text-muted-foreground">Approval</div>
              </div>
            )}
            <div className="flex items-center gap-1">
              {getStatusIcon(cassette.status)}
              <Badge variant="outline" className="text-xs">P{cassette.priority}</Badge>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );

  if (loading) {
    return (
      <div className="space-y-4">
        {Array.from({ length: 6 }).map((_, i) => (
          <Card key={i} className="animate-pulse">
            <CardContent className="p-4">
              <div className="space-y-2">
                <div className="h-4 bg-muted rounded w-3/4" />
                <div className="h-3 bg-muted rounded w-1/2" />
                <div className="h-2 bg-muted rounded w-full" />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (cassettes.length === 0) {
    return (
      <div className="text-center py-12">
        <Package className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
        <h3 className="text-lg font-semibold mb-2">No cassettes found</h3>
        <p className="text-sm text-muted-foreground mb-4">
          Try adjusting your search filters or create a new cassette
        </p>
        <Button onClick={() => onCreateFromGap('new')}>
          Create First Cassette
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {viewMode === 'grid' && (
        <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
          {cassettes.map(cassette => (
            <CassetteCard key={cassette.id} cassette={cassette} />
          ))}
        </div>
      )}

      {viewMode === 'list' && (
        <div className="space-y-2">
          {cassettes.map(cassette => (
            <CassetteListItem key={cassette.id} cassette={cassette} />
          ))}
        </div>
      )}

      {viewMode === 'compact' && (
        <div className="grid gap-2 grid-cols-1 md:grid-cols-2 lg:grid-cols-4">
          {cassettes.map(cassette => (
            <Card 
              key={cassette.id}
              className={`cursor-pointer transition-all duration-200 hover:scale-105 ${getStatusColor(cassette.status)}`}
              onClick={() => handleCassetteClick(cassette)}
            >
              <CardContent className="p-3">
                <div className="flex items-center gap-2">
                  <div className={`w-2 h-2 rounded-full ${getCategoryColor(cassette.category)}`} />
                  <span className="text-xs font-mono text-muted-foreground">
                    {cassette.id}
                  </span>
                  {getStatusIcon(cassette.status)}
                </div>
                <div className="text-sm font-medium truncate mt-1">
                  {cassette.name}
                </div>
                {cassette.status === 'existing' && (
                  <div className="text-xs text-muted-foreground mt-1">
                    {cassette.coherence.toFixed(1)}% • {cassette.usageCount} uses
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};

export default CassetteGrid;