import { AlertTriangle, Clock, Target, Plus, Eye, TrendingUp } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';

interface Gap {
  id: string;
  category: string;
  urgency: 1 | 2 | 3 | 4;
  name: string;
  blockerFor: string[];
  requestedBy: string;
  approvalScore: number;
  estimatedTime: string;
  description: string;
}

interface GapManagementDashboardProps {
  onCreateFromGap: (gapId: string) => void;
}

const GapManagementDashboard = ({ onCreateFromGap }: GapManagementDashboardProps) => {
  const gaps: Gap[] = [
    {
      id: 'META.8.003',
      category: 'META',
      urgency: 4,
      name: 'Library Request API',
      blockerFor: ['nucleus_creation', 'agent_spawning'],
      requestedBy: 'THRIVE_OS',
      approvalScore: 92,
      estimatedTime: '2 hours',
      description: 'API for requesting missing cassettes from the library system'
    },
    {
      id: 'META.12.001',
      category: 'META',
      urgency: 4,
      name: 'NUCLEUS Creation Protocol',
      blockerFor: ['nucleus_wizard', 'dna_mapping'],
      requestedBy: 'UI_SYSTEM',
      approvalScore: 88,
      estimatedTime: '4 hours',
      description: 'Complete protocol for NUCLEUS entity creation and management'
    },
    {
      id: 'K.2.004',
      category: 'K',
      urgency: 3,
      name: 'Search Algorithms',
      blockerFor: ['semantic_search'],
      requestedBy: 'LIBRARY_MANAGER',
      approvalScore: 75,
      estimatedTime: '3 hours',
      description: 'Advanced search algorithms for cassette discovery'
    },
    {
      id: 'INT.14.003',
      category: 'INT',
      urgency: 2,
      name: 'Vector Embedding Pipeline',
      blockerFor: ['ai_search'],
      requestedBy: 'SEARCH_ENGINE',
      approvalScore: 82,
      estimatedTime: '6 hours',
      description: 'Pipeline for generating and managing vector embeddings'
    },
    {
      id: 'M.4.002',
      category: 'M',
      urgency: 2,
      name: 'Search Optimization',
      blockerFor: ['performance'],
      requestedBy: 'PERFORMANCE_TEAM',
      approvalScore: 71,
      estimatedTime: '4 hours',
      description: 'Methods for optimizing search performance and relevance'
    }
  ];

  const gapStats = {
    total: 123,
    critical: 23,
    high: 46,
    medium: 30,
    standard: 24,
    estimatedTime: '2 weeks with 3 creators'
  };

  const getUrgencyColor = (urgency: number) => {
    switch (urgency) {
      case 4: return 'bg-red-500';
      case 3: return 'bg-orange-500';
      case 2: return 'bg-yellow-500';
      case 1: return 'bg-blue-500';
      default: return 'bg-gray-500';
    }
  };

  const getUrgencyLabel = (urgency: number) => {
    switch (urgency) {
      case 4: return 'Critical';
      case 3: return 'High';
      case 2: return 'Medium';
      case 1: return 'Standard';
      default: return 'Unknown';
    }
  };

  const getApprovalColor = (score: number) => {
    if (score >= 90) return 'text-coherence-high';
    if (score >= 70) return 'text-coherence-mid';
    return 'text-coherence-low';
  };

  return (
    <div className="space-y-4">
      {/* Summary Card */}
      <Card className="border-l-4 border-l-coherence-low">
        <CardHeader className="pb-3">
          <CardTitle className="text-sm flex items-center gap-2">
            <AlertTriangle className="h-4 w-4 text-coherence-low" />
            Gap Summary
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid grid-cols-2 gap-2 text-xs">
            <div className="space-y-1">
              <div className="flex justify-between">
                <span>Critical</span>
                <span className="font-mono text-red-500">{gapStats.critical}</span>
              </div>
              <div className="flex justify-between">
                <span>High</span>
                <span className="font-mono text-orange-500">{gapStats.high}</span>
              </div>
            </div>
            <div className="space-y-1">
              <div className="flex justify-between">
                <span>Medium</span>
                <span className="font-mono text-yellow-500">{gapStats.medium}</span>
              </div>
              <div className="flex justify-between">
                <span>Standard</span>
                <span className="font-mono text-blue-500">{gapStats.standard}</span>
              </div>
            </div>
          </div>
          
          <Separator />
          
          <div className="space-y-2">
            <div className="flex justify-between text-xs">
              <span>Total Gaps</span>
              <span className="font-mono font-bold">{gapStats.total}</span>
            </div>
            <div className="text-xs text-muted-foreground">
              Est. Time: {gapStats.estimatedTime}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Quick Actions */}
      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="text-sm">Quick Actions</CardTitle>
        </CardHeader>
        <CardContent className="space-y-2">
          <Button size="sm" className="w-full gap-2" onClick={() => onCreateFromGap('new')}>
            <Plus className="h-4 w-4" />
            Create Cassette
          </Button>
          <Button size="sm" variant="outline" className="w-full gap-2">
            <Eye className="h-4 w-4" />
            View All Gaps
          </Button>
          <Button size="sm" variant="outline" className="w-full gap-2">
            <TrendingUp className="h-4 w-4" />
            Gap Analytics
          </Button>
        </CardContent>
      </Card>

      {/* Top Priority Gaps */}
      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="text-sm">Priority Gaps</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3 max-h-96 overflow-y-auto">
          {gaps.slice(0, 5).map((gap) => (
            <div key={gap.id} className="space-y-2 p-3 border rounded-lg hover:bg-muted/50 transition-colors">
              <div className="flex items-start justify-between">
                <div className="flex-1 min-w-0">
                  <div className="flex items-center gap-2 mb-1">
                    <div className={`w-2 h-2 rounded-full ${getUrgencyColor(gap.urgency)}`} />
                    <span className="text-xs font-mono text-muted-foreground">
                      {gap.id}
                    </span>
                  </div>
                  <div className="text-sm font-medium line-clamp-2">
                    {gap.name}
                  </div>
                  <div className="text-xs text-muted-foreground mt-1">
                    {gap.description}
                  </div>
                </div>
              </div>

              <div className="flex items-center justify-between text-xs">
                <div className="flex items-center gap-2">
                  <Badge variant="outline" className="text-xs">
                    {getUrgencyLabel(gap.urgency)}
                  </Badge>
                  <span className="text-muted-foreground">
                    {gap.estimatedTime}
                  </span>
                </div>
                <div className={`font-mono ${getApprovalColor(gap.approvalScore)}`}>
                  {gap.approvalScore}/100
                </div>
              </div>

              {gap.blockerFor.length > 0 && (
                <div className="text-xs">
                  <span className="text-muted-foreground">Blocks: </span>
                  <span className="text-destructive">
                    {gap.blockerFor.join(', ')}
                  </span>
                </div>
              )}

              <div className="flex gap-2">
                <Button 
                  size="sm" 
                  className="flex-1 text-xs h-7"
                  onClick={() => onCreateFromGap(gap.id)}
                >
                  Create
                </Button>
                <Button size="sm" variant="outline" className="flex-1 text-xs h-7">
                  Defer
                </Button>
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      {/* Recent Activity */}
      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="text-sm">Recent Activity</CardTitle>
        </CardHeader>
        <CardContent className="space-y-2">
          <div className="space-y-2 text-xs">
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-coherence-high rounded-full" />
              <span className="text-muted-foreground">2 min ago</span>
              <span>Created META.3.007</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-coherence-mid rounded-full" />
              <span className="text-muted-foreground">15 min ago</span>
              <span>Gap identified: INT.14.004</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-coherence-high rounded-full" />
              <span className="text-muted-foreground">1 hour ago</span>
              <span>Validated K.2.003</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-coherence-low rounded-full" />
              <span className="text-muted-foreground">2 hours ago</span>
              <span>Request denied: LOW.1.001</span>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default GapManagementDashboard;