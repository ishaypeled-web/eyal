import React, { useState, useEffect } from 'react';
import { Activity, Gauge, AlertTriangle, TrendingUp, Eye } from 'lucide-react';
import { ThriveCard, Button } from '@/components/common';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { PieChart, Pie, Cell, ResponsiveContainer, LineChart, Line, XAxis, YAxis, Tooltip } from 'recharts';
import { cn } from '@/lib/utils';
import CoherenceAlertDashboard from './CoherenceAlertDashboard';
import CoherenceHistoryView from './CoherenceHistoryView';
import OptimizationPanel from './OptimizationPanel';

interface CoherenceMonitorDashboardProps {
  className?: string;
}

export const CoherenceMonitorDashboard: React.FC<CoherenceMonitorDashboardProps> = ({ 
  className 
}) => {
  const [currentScore, setCurrentScore] = useState(97.8);
  const [monitoringStatus, setMonitoringStatus] = useState<'active' | 'paused' | 'error'>('active');
  const [activeAlerts, setActiveAlerts] = useState(2);

  // Real-time sparkline data
  const [sparklineData, setSparklineData] = useState(
    Array.from({ length: 24 }, (_, i) => ({
      time: `${i}:00`,
      value: 95 + Math.random() * 4
    }))
  );

  // Component scores
  const componentScores = {
    agent: 97.2,
    conversation: 98.1,
    system: 96.8
  };

  // Update sparkline every few seconds
  useEffect(() => {
    const interval = setInterval(() => {
      setSparklineData(prev => {
        const newData = [...prev.slice(1)];
        newData.push({
          time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),
          value: 95 + Math.random() * 4
        });
        return newData;
      });
      
      setCurrentScore(prev => {
        const change = (Math.random() - 0.5) * 0.5;
        return Math.max(90, Math.min(100, prev + change));
      });
    }, 3000);

    return () => clearInterval(interval);
  }, []);

  const getScoreColor = (score: number) => {
    if (score >= 98) return 'text-coherence-high';
    if (score >= 95) return 'text-coherence-mid';
    if (score >= 90) return 'text-orange-400';
    return 'text-destructive';
  };

  const getProgressColor = (score: number) => {
    if (score >= 98) return 'bg-coherence-high';
    if (score >= 95) return 'bg-coherence-mid';
    if (score >= 90) return 'bg-orange-400';
    return 'bg-destructive';
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'text-coherence-high border-coherence-high/30 bg-coherence-high/10';
      case 'paused': return 'text-coherence-mid border-coherence-mid/30 bg-coherence-mid/10';
      case 'error': return 'text-destructive border-destructive/30 bg-destructive/10';
      default: return 'text-muted-foreground border-muted/30 bg-muted/10';
    }
  };

  // Pie chart data for component breakdown
  const pieData = [
    { name: 'Agent', value: componentScores.agent, color: 'hsl(var(--primary))' },
    { name: 'Conversation', value: componentScores.conversation, color: 'hsl(var(--secondary))' },
    { name: 'System', value: componentScores.system, color: 'hsl(var(--accent))' }
  ];

  return (
    <div className={cn('space-y-6', className)}>
      {/* Main Dashboard Header */}
      <ThriveCard variant="glassmorphism" className="p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <Activity className="w-6 h-6 text-primary" />
            <h2 className="text-2xl font-bold text-foreground">Coherence Monitor</h2>
          </div>
          <div className="flex items-center gap-2">
            <Badge className={cn('text-xs', getStatusColor(monitoringStatus))}>
              {monitoringStatus.toUpperCase()}
            </Badge>
            <Button variant="outline" size="sm">
              <Eye className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {/* Overview Cards */}
        <div className="grid grid-cols-4 gap-4">
          {/* Current Score - Radial Gauge */}
          <ThriveCard variant="solid" className="p-6 text-center">
            <div className="relative w-24 h-24 mx-auto mb-3">
              <svg className="w-24 h-24 transform -rotate-90" viewBox="0 0 120 120">
                <circle
                  cx="60"
                  cy="60"
                  r="45"
                  stroke="hsl(var(--muted))"
                  strokeWidth="10"
                  fill="none"
                />
                <circle
                  cx="60"
                  cy="60"
                  r="45"
                  stroke="hsl(var(--primary))"
                  strokeWidth="10"
                  fill="none"
                  strokeDasharray={`${(currentScore / 100) * 283} 283`}
                  strokeLinecap="round"
                  className="transition-all duration-1000"
                />
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <span className={cn('text-xl font-bold', getScoreColor(currentScore))}>
                  {currentScore.toFixed(1)}%
                </span>
              </div>
            </div>
            <div className="flex items-center gap-1 justify-center">
              <Gauge className="w-4 h-4 text-muted-foreground" />
              <span className="text-sm font-medium">Current Score</span>
            </div>
          </ThriveCard>

          {/* 24H Trend - Sparkline */}
          <ThriveCard variant="solid" className="p-4">
            <div className="flex items-center gap-2 mb-2">
              <TrendingUp className="w-4 h-4 text-coherence-high" />
              <span className="text-sm font-medium">24H Trend</span>
            </div>
            <div className="h-12 mb-2">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={sparklineData}>
                  <Line
                    type="monotone"
                    dataKey="value"
                    stroke="hsl(var(--primary))"
                    strokeWidth={2}
                    dot={false}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
            <div className="flex items-center gap-1">
              <span className="text-sm text-coherence-high">+2.3%</span>
              <span className="text-xs text-muted-foreground">vs yesterday</span>
            </div>
          </ThriveCard>

          {/* Active Alerts */}
          <ThriveCard variant="solid" className="p-4">
            <div className="flex items-center gap-2 mb-2">
              <AlertTriangle className="w-4 h-4 text-orange-400" />
              <span className="text-sm font-medium">Active Alerts</span>
            </div>
            <div className="text-2xl font-bold text-orange-400 mb-1">
              {activeAlerts}
            </div>
            <div className="text-xs text-muted-foreground">
              {activeAlerts === 0 ? 'All clear' : `${activeAlerts} require attention`}
            </div>
          </ThriveCard>

          {/* Monitoring Status */}
          <ThriveCard variant="solid" className="p-4">
            <div className="flex items-center gap-2 mb-2">
              <Activity className="w-4 h-4 text-primary" />
              <span className="text-sm font-medium">Status</span>
            </div>
            <div className={cn('text-lg font-bold mb-1', getScoreColor(currentScore))}>
              {monitoringStatus === 'active' ? 'Online' : 'Offline'}
            </div>
            <div className="text-xs text-muted-foreground">
              Last update: {new Date().toLocaleTimeString()}
            </div>
          </ThriveCard>
        </div>
      </ThriveCard>

      {/* Detailed View */}
      <ThriveCard variant="glassmorphism" className="p-6">
        <h3 className="text-lg font-semibold mb-4">Component Breakdown</h3>
        
        <div className="grid grid-cols-2 gap-6">
          {/* Progress Bars */}
          <div className="space-y-4">
            <div>
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium">Agent Coherence</span>
                <span className={cn('text-sm font-bold', getScoreColor(componentScores.agent))}>
                  {componentScores.agent}%
                </span>
              </div>
              <Progress value={componentScores.agent} className="h-2" />
            </div>
            
            <div>
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium">Conversation Coherence</span>
                <span className={cn('text-sm font-bold', getScoreColor(componentScores.conversation))}>
                  {componentScores.conversation}%
                </span>
              </div>
              <Progress value={componentScores.conversation} className="h-2" />
            </div>
            
            <div>
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium">System Coherence</span>
                <span className={cn('text-sm font-bold', getScoreColor(componentScores.system))}>
                  {componentScores.system}%
                </span>
              </div>
              <Progress value={componentScores.system} className="h-2" />
            </div>
          </div>

          {/* Pie Chart */}
          <div className="flex items-center justify-center">
            <div className="w-32 h-32">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={pieData}
                    cx="50%"
                    cy="50%"
                    innerRadius={25}
                    outerRadius={50}
                    dataKey="value"
                  >
                    {pieData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </div>
        </div>
      </ThriveCard>

      {/* Detailed Tabs */}
      <Tabs defaultValue="alerts" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="alerts">Alert Management</TabsTrigger>
          <TabsTrigger value="history">History & Trends</TabsTrigger>
          <TabsTrigger value="optimization">Optimization</TabsTrigger>
        </TabsList>

        <TabsContent value="alerts" className="mt-6">
          <CoherenceAlertDashboard />
        </TabsContent>

        <TabsContent value="history" className="mt-6">
          <CoherenceHistoryView />
        </TabsContent>

        <TabsContent value="optimization" className="mt-6">
          <OptimizationPanel />
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default CoherenceMonitorDashboard;