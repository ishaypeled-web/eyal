import { useState } from 'react';
import { X, Save, CheckCircle, AlertCircle, Package, Sparkles } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Separator } from '@/components/ui/separator';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';

interface CassetteCreatorProps {
  onClose: () => void;
}

const CassetteCreator = ({ onClose }: CassetteCreatorProps) => {
  const { toast } = useToast();
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    category: '',
    name: '',
    quickScan: '',
    basicUnderstanding: '',
    fullContent: '',
    tags: [] as string[],
    priority: '2'
  });

  const categories = [
    { value: 'META', label: 'META - System Core', description: 'Fundamental system protocols' },
    { value: 'CORE', label: 'CORE - Operations', description: 'Core operational procedures' },
    { value: 'NEURAL', label: 'NEURAL - AI Logic', description: 'AI reasoning and logic' },
    { value: 'QUANTUM', label: 'QUANTUM - Processing', description: 'Advanced computation' },
    { value: 'DNA', label: 'DNA - Identity', description: 'System identity and traits' },
    { value: 'AGENT', label: 'AGENT - Autonomous', description: 'Agent behaviors and actions' },
    { value: 'COMM', label: 'COMM - Communication', description: 'Inter-system communication' },
    { value: 'SECURE', label: 'SECURE - Security', description: 'Security protocols' },
    { value: 'ADAPT', label: 'ADAPT - Learning', description: 'Adaptive learning mechanisms' },
    { value: 'LEARN', label: 'LEARN - Knowledge', description: 'Knowledge acquisition' },
    { value: 'EVOLVE', label: 'EVOLVE - Growth', description: 'System evolution protocols' }
  ];

  const priorities = [
    { value: '1', label: 'Low Priority', color: 'bg-blue-500' },
    { value: '2', label: 'Normal Priority', color: 'bg-green-500' },
    { value: '3', label: 'High Priority', color: 'bg-orange-500' },
    { value: '4', label: 'Critical Priority', color: 'bg-red-500' }
  ];

  const generateId = () => {
    if (!formData.category) return '';
    // Simulate ID generation: CATEGORY.X.XXX
    const categoryNum = categories.findIndex(c => c.value === formData.category) + 1;
    const sequenceNum = Math.floor(Math.random() * 999) + 1;
    return `${formData.category}.${categoryNum}.${sequenceNum.toString().padStart(3, '0')}`;
  };

  const wordCounts = {
    quickScan: formData.quickScan.split(' ').filter(w => w).length,
    basicUnderstanding: formData.basicUnderstanding.split(' ').filter(w => w).length,
    fullContent: formData.fullContent.split(' ').filter(w => w).length
  };

  const limits = {
    quickScan: 50,
    basicUnderstanding: 200,
    fullContent: 500
  };

  const getValidationStatus = (field: keyof typeof wordCounts) => {
    const count = wordCounts[field];
    const limit = limits[field];
    if (count === 0) return 'empty';
    if (count > limit) return 'over';
    return 'valid';
  };

  const getProgressColor = (field: keyof typeof wordCounts) => {
    const status = getValidationStatus(field);
    if (status === 'over') return 'bg-destructive';
    if (status === 'valid') return 'bg-coherence-high';
    return 'bg-muted';
  };

  const isStepValid = () => {
    switch (step) {
      case 1:
        return formData.category && formData.name;
      case 2:
        return getValidationStatus('quickScan') === 'valid';
      case 3:
        return getValidationStatus('basicUnderstanding') === 'valid';
      case 4:
        return getValidationStatus('fullContent') === 'valid';
      case 5:
        return true;
      default:
        return false;
    }
  };

  const handleNext = () => {
    if (isStepValid() && step < 5) {
      setStep(step + 1);
    }
  };

  const handlePrevious = () => {
    if (step > 1) {
      setStep(step - 1);
    }
  };

  const handleSave = async () => {
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toast({
        title: "Cassette Created Successfully",
        description: `${generateId()} - ${formData.name}`,
      });
      
      onClose();
    } catch (error) {
      toast({
        title: "Error Creating Cassette",
        description: "Please try again later.",
        variant: "destructive",
      });
    }
  };

  const addTag = (tag: string) => {
    if (tag && !formData.tags.includes(tag)) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, tag]
      }));
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <div className="space-y-6">
            <div>
              <Label htmlFor="category" className="text-sm font-medium">Category *</Label>
              <Select value={formData.category} onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}>
                <SelectTrigger className="mt-2">
                  <SelectValue placeholder="Select a category" />
                </SelectTrigger>
                <SelectContent>
                  {categories.map(cat => (
                    <SelectItem key={cat.value} value={cat.value}>
                      <div>
                        <div className="font-medium">{cat.label}</div>
                        <div className="text-xs text-muted-foreground">{cat.description}</div>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="name" className="text-sm font-medium">Cassette Name *</Label>
              <Input
                id="name"
                placeholder="Enter cassette name..."
                value={formData.name}
                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                className="mt-2"
              />
            </div>

            {formData.category && (
              <div className="p-4 bg-muted rounded-lg">
                <div className="text-sm font-medium mb-2">Generated ID</div>
                <div className="font-mono text-lg text-primary">{generateId()}</div>
              </div>
            )}
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div>
              <div className="flex items-center justify-between mb-2">
                <Label htmlFor="quickScan" className="text-sm font-medium">Quick Scan (3 seconds)</Label>
                <div className="flex items-center gap-2">
                  <span className={`text-xs ${getValidationStatus('quickScan') === 'over' ? 'text-destructive' : 'text-muted-foreground'}`}>
                    {wordCounts.quickScan}/{limits.quickScan} words
                  </span>
                  {getValidationStatus('quickScan') === 'valid' && <CheckCircle className="h-4 w-4 text-coherence-high" />}
                  {getValidationStatus('quickScan') === 'over' && <AlertCircle className="h-4 w-4 text-destructive" />}
                </div>
              </div>
              <Textarea
                id="quickScan"
                placeholder="Brief 3-second overview (max 50 words)..."
                value={formData.quickScan}
                onChange={(e) => setFormData(prev => ({ ...prev, quickScan: e.target.value }))}
                className="min-h-[100px]"
              />
              <Progress 
                value={(wordCounts.quickScan / limits.quickScan) * 100} 
                className={`mt-2 h-2 ${getProgressColor('quickScan')}`}
              />
            </div>
            <div className="text-xs text-muted-foreground">
              The quick scan provides an instant understanding of the cassette's purpose.
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div>
              <div className="flex items-center justify-between mb-2">
                <Label htmlFor="basicUnderstanding" className="text-sm font-medium">Basic Understanding (30 seconds)</Label>
                <div className="flex items-center gap-2">
                  <span className={`text-xs ${getValidationStatus('basicUnderstanding') === 'over' ? 'text-destructive' : 'text-muted-foreground'}`}>
                    {wordCounts.basicUnderstanding}/{limits.basicUnderstanding} words
                  </span>
                  {getValidationStatus('basicUnderstanding') === 'valid' && <CheckCircle className="h-4 w-4 text-coherence-high" />}
                  {getValidationStatus('basicUnderstanding') === 'over' && <AlertCircle className="h-4 w-4 text-destructive" />}
                </div>
              </div>
              <Textarea
                id="basicUnderstanding"
                placeholder="30-second overview with key concepts (max 200 words)..."
                value={formData.basicUnderstanding}
                onChange={(e) => setFormData(prev => ({ ...prev, basicUnderstanding: e.target.value }))}
                className="min-h-[150px]"
              />
              <Progress 
                value={(wordCounts.basicUnderstanding / limits.basicUnderstanding) * 100} 
                className={`mt-2 h-2 ${getProgressColor('basicUnderstanding')}`}
              />
            </div>
            <div className="text-xs text-muted-foreground">
              The basic understanding provides a clear overview of functionality and use cases.
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <div>
              <div className="flex items-center justify-between mb-2">
                <Label htmlFor="fullContent" className="text-sm font-medium">Full Content (3 minutes)</Label>
                <div className="flex items-center gap-2">
                  <span className={`text-xs ${getValidationStatus('fullContent') === 'over' ? 'text-destructive' : 'text-muted-foreground'}`}>
                    {wordCounts.fullContent}/{limits.fullContent} words
                  </span>
                  {getValidationStatus('fullContent') === 'valid' && <CheckCircle className="h-4 w-4 text-coherence-high" />}
                  {getValidationStatus('fullContent') === 'over' && <AlertCircle className="h-4 w-4 text-destructive" />}
                </div>
              </div>
              <Textarea
                id="fullContent"
                placeholder="Complete detailed content (max 500 words)..."
                value={formData.fullContent}
                onChange={(e) => setFormData(prev => ({ ...prev, fullContent: e.target.value }))}
                className="min-h-[200px]"
              />
              <Progress 
                value={(wordCounts.fullContent / limits.fullContent) * 100} 
                className={`mt-2 h-2 ${getProgressColor('fullContent')}`}
              />
            </div>
            <div className="text-xs text-muted-foreground">
              The full content provides comprehensive implementation details and specifications.
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-6">
            <div>
              <Label className="text-sm font-medium">Tags</Label>
              <div className="flex flex-wrap gap-2 mt-2 mb-2">
                {formData.tags.map(tag => (
                  <Badge key={tag} variant="secondary" className="cursor-pointer" onClick={() => removeTag(tag)}>
                    {tag} <X className="h-3 w-3 ml-1" />
                  </Badge>
                ))}
              </div>
              <Input
                placeholder="Add tags (press Enter)..."
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    e.preventDefault();
                    addTag((e.target as HTMLInputElement).value);
                    (e.target as HTMLInputElement).value = '';
                  }
                }}
              />
            </div>

            <div>
              <Label className="text-sm font-medium">Priority Level</Label>
              <Select value={formData.priority} onValueChange={(value) => setFormData(prev => ({ ...prev, priority: value }))}>
                <SelectTrigger className="mt-2">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {priorities.map(priority => (
                    <SelectItem key={priority.value} value={priority.value}>
                      <div className="flex items-center gap-2">
                        <div className={`w-3 h-3 rounded-full ${priority.color}`} />
                        {priority.label}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <Separator />

            <div className="bg-muted p-4 rounded-lg">
              <h4 className="font-medium mb-2">Cassette Summary</h4>
              <div className="space-y-2 text-sm">
                <div><span className="font-medium">ID:</span> {generateId()}</div>
                <div><span className="font-medium">Category:</span> {formData.category}</div>
                <div><span className="font-medium">Name:</span> {formData.name}</div>
                <div><span className="font-medium">Priority:</span> {priorities.find(p => p.value === formData.priority)?.label}</div>
                <div><span className="font-medium">Tags:</span> {formData.tags.join(', ') || 'None'}</div>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl max-h-[90vh] overflow-hidden">
        <CardHeader className="border-b">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Package className="h-6 w-6 text-primary" />
              <div>
                <CardTitle>Create New Cassette</CardTitle>
                <div className="text-sm text-muted-foreground">Step {step} of 5</div>
              </div>
            </div>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="h-4 w-4" />
            </Button>
          </div>
          <div className="mt-4">
            <Progress value={(step / 5) * 100} className="h-2" />
          </div>
        </CardHeader>

        <CardContent className="overflow-auto max-h-[60vh] p-6">
          {renderStep()}
        </CardContent>

        <div className="border-t p-6">
          <div className="flex justify-between">
            <Button 
              variant="outline" 
              onClick={handlePrevious}
              disabled={step === 1}
            >
              Previous
            </Button>
            <div className="flex gap-2">
              {step === 5 ? (
                <Button onClick={handleSave} className="gap-2">
                  <Save className="h-4 w-4" />
                  Create Cassette
                </Button>
              ) : (
                <Button 
                  onClick={handleNext}
                  disabled={!isStepValid()}
                  className="gap-2"
                >
                  Next
                  <Sparkles className="h-4 w-4" />
                </Button>
              )}
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default CassetteCreator;